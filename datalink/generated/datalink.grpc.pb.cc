// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: datalink.proto

#include "datalink.pb.h"
#include "datalink.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
#include <grpcpp/ports_def.inc>
namespace datalink {

static const char* DataLinkService_method_names[] = {
  "/datalink.DataLinkService/StreamDataLink",
};

std::unique_ptr< DataLinkService::Stub> DataLinkService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< DataLinkService::Stub> stub(new DataLinkService::Stub(channel, options));
  return stub;
}

DataLinkService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_StreamDataLink_(DataLinkService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  {}

::grpc::ClientReader< ::datalink::DataLinkStreamResponse>* DataLinkService::Stub::StreamDataLinkRaw(::grpc::ClientContext* context, const ::datalink::DataLinkRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::datalink::DataLinkStreamResponse>::Create(channel_.get(), rpcmethod_StreamDataLink_, context, request);
}

void DataLinkService::Stub::async::StreamDataLink(::grpc::ClientContext* context, const ::datalink::DataLinkRequest* request, ::grpc::ClientReadReactor< ::datalink::DataLinkStreamResponse>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::datalink::DataLinkStreamResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_StreamDataLink_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::datalink::DataLinkStreamResponse>* DataLinkService::Stub::AsyncStreamDataLinkRaw(::grpc::ClientContext* context, const ::datalink::DataLinkRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::datalink::DataLinkStreamResponse>::Create(channel_.get(), cq, rpcmethod_StreamDataLink_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::datalink::DataLinkStreamResponse>* DataLinkService::Stub::PrepareAsyncStreamDataLinkRaw(::grpc::ClientContext* context, const ::datalink::DataLinkRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::datalink::DataLinkStreamResponse>::Create(channel_.get(), cq, rpcmethod_StreamDataLink_, context, request, false, nullptr);
}

DataLinkService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DataLinkService_method_names[0],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< DataLinkService::Service, ::datalink::DataLinkRequest, ::datalink::DataLinkStreamResponse>(
          [](DataLinkService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::datalink::DataLinkRequest* req,
             ::grpc::ServerWriter<::datalink::DataLinkStreamResponse>* writer) {
               return service->StreamDataLink(ctx, req, writer);
             }, this)));
}

DataLinkService::Service::~Service() {
}

::grpc::Status DataLinkService::Service::StreamDataLink(::grpc::ServerContext* context, const ::datalink::DataLinkRequest* request, ::grpc::ServerWriter< ::datalink::DataLinkStreamResponse>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace datalink
#include <grpcpp/ports_undef.inc>

