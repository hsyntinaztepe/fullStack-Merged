// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: datalink.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_datalink_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_datalink_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_datalink_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_datalink_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_datalink_2eproto;
namespace datalink {
class DataLinkMessage;
struct DataLinkMessageDefaultTypeInternal;
extern DataLinkMessageDefaultTypeInternal _DataLinkMessage_default_instance_;
class DataLinkRequest;
struct DataLinkRequestDefaultTypeInternal;
extern DataLinkRequestDefaultTypeInternal _DataLinkRequest_default_instance_;
class DataLinkResponse;
struct DataLinkResponseDefaultTypeInternal;
extern DataLinkResponseDefaultTypeInternal _DataLinkResponse_default_instance_;
}  // namespace datalink
PROTOBUF_NAMESPACE_OPEN
template<> ::datalink::DataLinkMessage* Arena::CreateMaybeMessage<::datalink::DataLinkMessage>(Arena*);
template<> ::datalink::DataLinkRequest* Arena::CreateMaybeMessage<::datalink::DataLinkRequest>(Arena*);
template<> ::datalink::DataLinkResponse* Arena::CreateMaybeMessage<::datalink::DataLinkResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace datalink {

// ===================================================================

class DataLinkMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:datalink.DataLinkMessage) */ {
 public:
  inline DataLinkMessage() : DataLinkMessage(nullptr) {}
  ~DataLinkMessage() override;
  explicit PROTOBUF_CONSTEXPR DataLinkMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DataLinkMessage(const DataLinkMessage& from);
  DataLinkMessage(DataLinkMessage&& from) noexcept
    : DataLinkMessage() {
    *this = ::std::move(from);
  }

  inline DataLinkMessage& operator=(const DataLinkMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline DataLinkMessage& operator=(DataLinkMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DataLinkMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const DataLinkMessage* internal_default_instance() {
    return reinterpret_cast<const DataLinkMessage*>(
               &_DataLinkMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(DataLinkMessage& a, DataLinkMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(DataLinkMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DataLinkMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DataLinkMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DataLinkMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DataLinkMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DataLinkMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DataLinkMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "datalink.DataLinkMessage";
  }
  protected:
  explicit DataLinkMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kFromFieldNumber = 2,
    kToFieldNumber = 3,
    kTextFieldNumber = 4,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string from = 2;
  void clear_from();
  const std::string& from() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_from(ArgT0&& arg0, ArgT... args);
  std::string* mutable_from();
  PROTOBUF_NODISCARD std::string* release_from();
  void set_allocated_from(std::string* from);
  private:
  const std::string& _internal_from() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_from(const std::string& value);
  std::string* _internal_mutable_from();
  public:

  // string to = 3;
  void clear_to();
  const std::string& to() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_to(ArgT0&& arg0, ArgT... args);
  std::string* mutable_to();
  PROTOBUF_NODISCARD std::string* release_to();
  void set_allocated_to(std::string* to);
  private:
  const std::string& _internal_to() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_to(const std::string& value);
  std::string* _internal_mutable_to();
  public:

  // string text = 4;
  void clear_text();
  const std::string& text() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_text(ArgT0&& arg0, ArgT... args);
  std::string* mutable_text();
  PROTOBUF_NODISCARD std::string* release_text();
  void set_allocated_text(std::string* text);
  private:
  const std::string& _internal_text() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_text(const std::string& value);
  std::string* _internal_mutable_text();
  public:

  // @@protoc_insertion_point(class_scope:datalink.DataLinkMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr from_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr to_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr text_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_datalink_2eproto;
};
// -------------------------------------------------------------------

class DataLinkRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:datalink.DataLinkRequest) */ {
 public:
  inline DataLinkRequest() : DataLinkRequest(nullptr) {}
  ~DataLinkRequest() override;
  explicit PROTOBUF_CONSTEXPR DataLinkRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DataLinkRequest(const DataLinkRequest& from);
  DataLinkRequest(DataLinkRequest&& from) noexcept
    : DataLinkRequest() {
    *this = ::std::move(from);
  }

  inline DataLinkRequest& operator=(const DataLinkRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DataLinkRequest& operator=(DataLinkRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DataLinkRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DataLinkRequest* internal_default_instance() {
    return reinterpret_cast<const DataLinkRequest*>(
               &_DataLinkRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(DataLinkRequest& a, DataLinkRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DataLinkRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DataLinkRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DataLinkRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DataLinkRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DataLinkRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DataLinkRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DataLinkRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "datalink.DataLinkRequest";
  }
  protected:
  explicit DataLinkRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFilterFieldNumber = 1,
  };
  // string filter = 1;
  void clear_filter();
  const std::string& filter() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_filter(ArgT0&& arg0, ArgT... args);
  std::string* mutable_filter();
  PROTOBUF_NODISCARD std::string* release_filter();
  void set_allocated_filter(std::string* filter);
  private:
  const std::string& _internal_filter() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_filter(const std::string& value);
  std::string* _internal_mutable_filter();
  public:

  // @@protoc_insertion_point(class_scope:datalink.DataLinkRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr filter_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_datalink_2eproto;
};
// -------------------------------------------------------------------

class DataLinkResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:datalink.DataLinkResponse) */ {
 public:
  inline DataLinkResponse() : DataLinkResponse(nullptr) {}
  ~DataLinkResponse() override;
  explicit PROTOBUF_CONSTEXPR DataLinkResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DataLinkResponse(const DataLinkResponse& from);
  DataLinkResponse(DataLinkResponse&& from) noexcept
    : DataLinkResponse() {
    *this = ::std::move(from);
  }

  inline DataLinkResponse& operator=(const DataLinkResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DataLinkResponse& operator=(DataLinkResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DataLinkResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const DataLinkResponse* internal_default_instance() {
    return reinterpret_cast<const DataLinkResponse*>(
               &_DataLinkResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(DataLinkResponse& a, DataLinkResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DataLinkResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DataLinkResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DataLinkResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DataLinkResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DataLinkResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DataLinkResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DataLinkResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "datalink.DataLinkResponse";
  }
  protected:
  explicit DataLinkResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessagesFieldNumber = 1,
    kTotalCountFieldNumber = 2,
  };
  // repeated .datalink.DataLinkMessage messages = 1;
  int messages_size() const;
  private:
  int _internal_messages_size() const;
  public:
  void clear_messages();
  ::datalink::DataLinkMessage* mutable_messages(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::datalink::DataLinkMessage >*
      mutable_messages();
  private:
  const ::datalink::DataLinkMessage& _internal_messages(int index) const;
  ::datalink::DataLinkMessage* _internal_add_messages();
  public:
  const ::datalink::DataLinkMessage& messages(int index) const;
  ::datalink::DataLinkMessage* add_messages();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::datalink::DataLinkMessage >&
      messages() const;

  // int32 total_count = 2;
  void clear_total_count();
  int32_t total_count() const;
  void set_total_count(int32_t value);
  private:
  int32_t _internal_total_count() const;
  void _internal_set_total_count(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:datalink.DataLinkResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::datalink::DataLinkMessage > messages_;
  int32_t total_count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_datalink_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// DataLinkMessage

// string id = 1;
inline void DataLinkMessage::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& DataLinkMessage::id() const {
  // @@protoc_insertion_point(field_get:datalink.DataLinkMessage.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DataLinkMessage::set_id(ArgT0&& arg0, ArgT... args) {
 
 id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:datalink.DataLinkMessage.id)
}
inline std::string* DataLinkMessage::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:datalink.DataLinkMessage.id)
  return _s;
}
inline const std::string& DataLinkMessage::_internal_id() const {
  return id_.Get();
}
inline void DataLinkMessage::_internal_set_id(const std::string& value) {
  
  id_.Set(value, GetArenaForAllocation());
}
inline std::string* DataLinkMessage::_internal_mutable_id() {
  
  return id_.Mutable(GetArenaForAllocation());
}
inline std::string* DataLinkMessage::release_id() {
  // @@protoc_insertion_point(field_release:datalink.DataLinkMessage.id)
  return id_.Release();
}
inline void DataLinkMessage::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (id_.IsDefault()) {
    id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:datalink.DataLinkMessage.id)
}

// string from = 2;
inline void DataLinkMessage::clear_from() {
  from_.ClearToEmpty();
}
inline const std::string& DataLinkMessage::from() const {
  // @@protoc_insertion_point(field_get:datalink.DataLinkMessage.from)
  return _internal_from();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DataLinkMessage::set_from(ArgT0&& arg0, ArgT... args) {
 
 from_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:datalink.DataLinkMessage.from)
}
inline std::string* DataLinkMessage::mutable_from() {
  std::string* _s = _internal_mutable_from();
  // @@protoc_insertion_point(field_mutable:datalink.DataLinkMessage.from)
  return _s;
}
inline const std::string& DataLinkMessage::_internal_from() const {
  return from_.Get();
}
inline void DataLinkMessage::_internal_set_from(const std::string& value) {
  
  from_.Set(value, GetArenaForAllocation());
}
inline std::string* DataLinkMessage::_internal_mutable_from() {
  
  return from_.Mutable(GetArenaForAllocation());
}
inline std::string* DataLinkMessage::release_from() {
  // @@protoc_insertion_point(field_release:datalink.DataLinkMessage.from)
  return from_.Release();
}
inline void DataLinkMessage::set_allocated_from(std::string* from) {
  if (from != nullptr) {
    
  } else {
    
  }
  from_.SetAllocated(from, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from_.IsDefault()) {
    from_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:datalink.DataLinkMessage.from)
}

// string to = 3;
inline void DataLinkMessage::clear_to() {
  to_.ClearToEmpty();
}
inline const std::string& DataLinkMessage::to() const {
  // @@protoc_insertion_point(field_get:datalink.DataLinkMessage.to)
  return _internal_to();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DataLinkMessage::set_to(ArgT0&& arg0, ArgT... args) {
 
 to_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:datalink.DataLinkMessage.to)
}
inline std::string* DataLinkMessage::mutable_to() {
  std::string* _s = _internal_mutable_to();
  // @@protoc_insertion_point(field_mutable:datalink.DataLinkMessage.to)
  return _s;
}
inline const std::string& DataLinkMessage::_internal_to() const {
  return to_.Get();
}
inline void DataLinkMessage::_internal_set_to(const std::string& value) {
  
  to_.Set(value, GetArenaForAllocation());
}
inline std::string* DataLinkMessage::_internal_mutable_to() {
  
  return to_.Mutable(GetArenaForAllocation());
}
inline std::string* DataLinkMessage::release_to() {
  // @@protoc_insertion_point(field_release:datalink.DataLinkMessage.to)
  return to_.Release();
}
inline void DataLinkMessage::set_allocated_to(std::string* to) {
  if (to != nullptr) {
    
  } else {
    
  }
  to_.SetAllocated(to, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (to_.IsDefault()) {
    to_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:datalink.DataLinkMessage.to)
}

// string text = 4;
inline void DataLinkMessage::clear_text() {
  text_.ClearToEmpty();
}
inline const std::string& DataLinkMessage::text() const {
  // @@protoc_insertion_point(field_get:datalink.DataLinkMessage.text)
  return _internal_text();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DataLinkMessage::set_text(ArgT0&& arg0, ArgT... args) {
 
 text_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:datalink.DataLinkMessage.text)
}
inline std::string* DataLinkMessage::mutable_text() {
  std::string* _s = _internal_mutable_text();
  // @@protoc_insertion_point(field_mutable:datalink.DataLinkMessage.text)
  return _s;
}
inline const std::string& DataLinkMessage::_internal_text() const {
  return text_.Get();
}
inline void DataLinkMessage::_internal_set_text(const std::string& value) {
  
  text_.Set(value, GetArenaForAllocation());
}
inline std::string* DataLinkMessage::_internal_mutable_text() {
  
  return text_.Mutable(GetArenaForAllocation());
}
inline std::string* DataLinkMessage::release_text() {
  // @@protoc_insertion_point(field_release:datalink.DataLinkMessage.text)
  return text_.Release();
}
inline void DataLinkMessage::set_allocated_text(std::string* text) {
  if (text != nullptr) {
    
  } else {
    
  }
  text_.SetAllocated(text, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (text_.IsDefault()) {
    text_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:datalink.DataLinkMessage.text)
}

// -------------------------------------------------------------------

// DataLinkRequest

// string filter = 1;
inline void DataLinkRequest::clear_filter() {
  filter_.ClearToEmpty();
}
inline const std::string& DataLinkRequest::filter() const {
  // @@protoc_insertion_point(field_get:datalink.DataLinkRequest.filter)
  return _internal_filter();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DataLinkRequest::set_filter(ArgT0&& arg0, ArgT... args) {
 
 filter_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:datalink.DataLinkRequest.filter)
}
inline std::string* DataLinkRequest::mutable_filter() {
  std::string* _s = _internal_mutable_filter();
  // @@protoc_insertion_point(field_mutable:datalink.DataLinkRequest.filter)
  return _s;
}
inline const std::string& DataLinkRequest::_internal_filter() const {
  return filter_.Get();
}
inline void DataLinkRequest::_internal_set_filter(const std::string& value) {
  
  filter_.Set(value, GetArenaForAllocation());
}
inline std::string* DataLinkRequest::_internal_mutable_filter() {
  
  return filter_.Mutable(GetArenaForAllocation());
}
inline std::string* DataLinkRequest::release_filter() {
  // @@protoc_insertion_point(field_release:datalink.DataLinkRequest.filter)
  return filter_.Release();
}
inline void DataLinkRequest::set_allocated_filter(std::string* filter) {
  if (filter != nullptr) {
    
  } else {
    
  }
  filter_.SetAllocated(filter, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (filter_.IsDefault()) {
    filter_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:datalink.DataLinkRequest.filter)
}

// -------------------------------------------------------------------

// DataLinkResponse

// repeated .datalink.DataLinkMessage messages = 1;
inline int DataLinkResponse::_internal_messages_size() const {
  return messages_.size();
}
inline int DataLinkResponse::messages_size() const {
  return _internal_messages_size();
}
inline void DataLinkResponse::clear_messages() {
  messages_.Clear();
}
inline ::datalink::DataLinkMessage* DataLinkResponse::mutable_messages(int index) {
  // @@protoc_insertion_point(field_mutable:datalink.DataLinkResponse.messages)
  return messages_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::datalink::DataLinkMessage >*
DataLinkResponse::mutable_messages() {
  // @@protoc_insertion_point(field_mutable_list:datalink.DataLinkResponse.messages)
  return &messages_;
}
inline const ::datalink::DataLinkMessage& DataLinkResponse::_internal_messages(int index) const {
  return messages_.Get(index);
}
inline const ::datalink::DataLinkMessage& DataLinkResponse::messages(int index) const {
  // @@protoc_insertion_point(field_get:datalink.DataLinkResponse.messages)
  return _internal_messages(index);
}
inline ::datalink::DataLinkMessage* DataLinkResponse::_internal_add_messages() {
  return messages_.Add();
}
inline ::datalink::DataLinkMessage* DataLinkResponse::add_messages() {
  ::datalink::DataLinkMessage* _add = _internal_add_messages();
  // @@protoc_insertion_point(field_add:datalink.DataLinkResponse.messages)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::datalink::DataLinkMessage >&
DataLinkResponse::messages() const {
  // @@protoc_insertion_point(field_list:datalink.DataLinkResponse.messages)
  return messages_;
}

// int32 total_count = 2;
inline void DataLinkResponse::clear_total_count() {
  total_count_ = 0;
}
inline int32_t DataLinkResponse::_internal_total_count() const {
  return total_count_;
}
inline int32_t DataLinkResponse::total_count() const {
  // @@protoc_insertion_point(field_get:datalink.DataLinkResponse.total_count)
  return _internal_total_count();
}
inline void DataLinkResponse::_internal_set_total_count(int32_t value) {
  
  total_count_ = value;
}
inline void DataLinkResponse::set_total_count(int32_t value) {
  _internal_set_total_count(value);
  // @@protoc_insertion_point(field_set:datalink.DataLinkResponse.total_count)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace datalink

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_datalink_2eproto
