// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: datalink.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_datalink_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_datalink_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_datalink_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_datalink_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_datalink_2eproto;
namespace datalink {
class DLData;
struct DLDataDefaultTypeInternal;
extern DLDataDefaultTypeInternal _DLData_default_instance_;
class DLRequest;
struct DLRequestDefaultTypeInternal;
extern DLRequestDefaultTypeInternal _DLRequest_default_instance_;
class DLStreamResponse;
struct DLStreamResponseDefaultTypeInternal;
extern DLStreamResponseDefaultTypeInternal _DLStreamResponse_default_instance_;
}  // namespace datalink
PROTOBUF_NAMESPACE_OPEN
template<> ::datalink::DLData* Arena::CreateMaybeMessage<::datalink::DLData>(Arena*);
template<> ::datalink::DLRequest* Arena::CreateMaybeMessage<::datalink::DLRequest>(Arena*);
template<> ::datalink::DLStreamResponse* Arena::CreateMaybeMessage<::datalink::DLStreamResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace datalink {

// ===================================================================

class DLRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:datalink.DLRequest) */ {
 public:
  inline DLRequest() : DLRequest(nullptr) {}
  explicit PROTOBUF_CONSTEXPR DLRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DLRequest(const DLRequest& from);
  DLRequest(DLRequest&& from) noexcept
    : DLRequest() {
    *this = ::std::move(from);
  }

  inline DLRequest& operator=(const DLRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DLRequest& operator=(DLRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DLRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DLRequest* internal_default_instance() {
    return reinterpret_cast<const DLRequest*>(
               &_DLRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(DLRequest& a, DLRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DLRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DLRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DLRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DLRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const DLRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const DLRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "datalink.DLRequest";
  }
  protected:
  explicit DLRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:datalink.DLRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  friend struct ::TableStruct_datalink_2eproto;
};
// -------------------------------------------------------------------

class DLData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:datalink.DLData) */ {
 public:
  inline DLData() : DLData(nullptr) {}
  ~DLData() override;
  explicit PROTOBUF_CONSTEXPR DLData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DLData(const DLData& from);
  DLData(DLData&& from) noexcept
    : DLData() {
    *this = ::std::move(from);
  }

  inline DLData& operator=(const DLData& from) {
    CopyFrom(from);
    return *this;
  }
  inline DLData& operator=(DLData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DLData& default_instance() {
    return *internal_default_instance();
  }
  static inline const DLData* internal_default_instance() {
    return reinterpret_cast<const DLData*>(
               &_DLData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(DLData& a, DLData& b) {
    a.Swap(&b);
  }
  inline void Swap(DLData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DLData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DLData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DLData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DLData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DLData& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DLData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "datalink.DLData";
  }
  protected:
  explicit DLData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kCallsignFieldNumber = 2,
    kStatusFieldNumber = 3,
    kLatFieldNumber = 4,
    kLonFieldNumber = 5,
    kVelocityFieldNumber = 6,
    kBaroAltFieldNumber = 7,
    kGeoAltFieldNumber = 8,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string callsign = 2;
  void clear_callsign();
  const std::string& callsign() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_callsign(ArgT0&& arg0, ArgT... args);
  std::string* mutable_callsign();
  PROTOBUF_NODISCARD std::string* release_callsign();
  void set_allocated_callsign(std::string* callsign);
  private:
  const std::string& _internal_callsign() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_callsign(const std::string& value);
  std::string* _internal_mutable_callsign();
  public:

  // string status = 3;
  void clear_status();
  const std::string& status() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_status(ArgT0&& arg0, ArgT... args);
  std::string* mutable_status();
  PROTOBUF_NODISCARD std::string* release_status();
  void set_allocated_status(std::string* status);
  private:
  const std::string& _internal_status() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_status(const std::string& value);
  std::string* _internal_mutable_status();
  public:

  // double lat = 4;
  void clear_lat();
  double lat() const;
  void set_lat(double value);
  private:
  double _internal_lat() const;
  void _internal_set_lat(double value);
  public:

  // double lon = 5;
  void clear_lon();
  double lon() const;
  void set_lon(double value);
  private:
  double _internal_lon() const;
  void _internal_set_lon(double value);
  public:

  // double velocity = 6;
  void clear_velocity();
  double velocity() const;
  void set_velocity(double value);
  private:
  double _internal_velocity() const;
  void _internal_set_velocity(double value);
  public:

  // double baroAlt = 7;
  void clear_baroalt();
  double baroalt() const;
  void set_baroalt(double value);
  private:
  double _internal_baroalt() const;
  void _internal_set_baroalt(double value);
  public:

  // double geoAlt = 8;
  void clear_geoalt();
  double geoalt() const;
  void set_geoalt(double value);
  private:
  double _internal_geoalt() const;
  void _internal_set_geoalt(double value);
  public:

  // @@protoc_insertion_point(class_scope:datalink.DLData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr callsign_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr status_;
  double lat_;
  double lon_;
  double velocity_;
  double baroalt_;
  double geoalt_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_datalink_2eproto;
};
// -------------------------------------------------------------------

class DLStreamResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:datalink.DLStreamResponse) */ {
 public:
  inline DLStreamResponse() : DLStreamResponse(nullptr) {}
  ~DLStreamResponse() override;
  explicit PROTOBUF_CONSTEXPR DLStreamResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DLStreamResponse(const DLStreamResponse& from);
  DLStreamResponse(DLStreamResponse&& from) noexcept
    : DLStreamResponse() {
    *this = ::std::move(from);
  }

  inline DLStreamResponse& operator=(const DLStreamResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DLStreamResponse& operator=(DLStreamResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DLStreamResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const DLStreamResponse* internal_default_instance() {
    return reinterpret_cast<const DLStreamResponse*>(
               &_DLStreamResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(DLStreamResponse& a, DLStreamResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DLStreamResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DLStreamResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DLStreamResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DLStreamResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DLStreamResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DLStreamResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DLStreamResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "datalink.DLStreamResponse";
  }
  protected:
  explicit DLStreamResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
  };
  // .datalink.DLData data = 1;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const ::datalink::DLData& data() const;
  PROTOBUF_NODISCARD ::datalink::DLData* release_data();
  ::datalink::DLData* mutable_data();
  void set_allocated_data(::datalink::DLData* data);
  private:
  const ::datalink::DLData& _internal_data() const;
  ::datalink::DLData* _internal_mutable_data();
  public:
  void unsafe_arena_set_allocated_data(
      ::datalink::DLData* data);
  ::datalink::DLData* unsafe_arena_release_data();

  // @@protoc_insertion_point(class_scope:datalink.DLStreamResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::datalink::DLData* data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_datalink_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// DLRequest

// -------------------------------------------------------------------

// DLData

// string id = 1;
inline void DLData::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& DLData::id() const {
  // @@protoc_insertion_point(field_get:datalink.DLData.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DLData::set_id(ArgT0&& arg0, ArgT... args) {
 
 id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:datalink.DLData.id)
}
inline std::string* DLData::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:datalink.DLData.id)
  return _s;
}
inline const std::string& DLData::_internal_id() const {
  return id_.Get();
}
inline void DLData::_internal_set_id(const std::string& value) {
  
  id_.Set(value, GetArenaForAllocation());
}
inline std::string* DLData::_internal_mutable_id() {
  
  return id_.Mutable(GetArenaForAllocation());
}
inline std::string* DLData::release_id() {
  // @@protoc_insertion_point(field_release:datalink.DLData.id)
  return id_.Release();
}
inline void DLData::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (id_.IsDefault()) {
    id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:datalink.DLData.id)
}

// string callsign = 2;
inline void DLData::clear_callsign() {
  callsign_.ClearToEmpty();
}
inline const std::string& DLData::callsign() const {
  // @@protoc_insertion_point(field_get:datalink.DLData.callsign)
  return _internal_callsign();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DLData::set_callsign(ArgT0&& arg0, ArgT... args) {
 
 callsign_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:datalink.DLData.callsign)
}
inline std::string* DLData::mutable_callsign() {
  std::string* _s = _internal_mutable_callsign();
  // @@protoc_insertion_point(field_mutable:datalink.DLData.callsign)
  return _s;
}
inline const std::string& DLData::_internal_callsign() const {
  return callsign_.Get();
}
inline void DLData::_internal_set_callsign(const std::string& value) {
  
  callsign_.Set(value, GetArenaForAllocation());
}
inline std::string* DLData::_internal_mutable_callsign() {
  
  return callsign_.Mutable(GetArenaForAllocation());
}
inline std::string* DLData::release_callsign() {
  // @@protoc_insertion_point(field_release:datalink.DLData.callsign)
  return callsign_.Release();
}
inline void DLData::set_allocated_callsign(std::string* callsign) {
  if (callsign != nullptr) {
    
  } else {
    
  }
  callsign_.SetAllocated(callsign, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (callsign_.IsDefault()) {
    callsign_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:datalink.DLData.callsign)
}

// string status = 3;
inline void DLData::clear_status() {
  status_.ClearToEmpty();
}
inline const std::string& DLData::status() const {
  // @@protoc_insertion_point(field_get:datalink.DLData.status)
  return _internal_status();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DLData::set_status(ArgT0&& arg0, ArgT... args) {
 
 status_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:datalink.DLData.status)
}
inline std::string* DLData::mutable_status() {
  std::string* _s = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:datalink.DLData.status)
  return _s;
}
inline const std::string& DLData::_internal_status() const {
  return status_.Get();
}
inline void DLData::_internal_set_status(const std::string& value) {
  
  status_.Set(value, GetArenaForAllocation());
}
inline std::string* DLData::_internal_mutable_status() {
  
  return status_.Mutable(GetArenaForAllocation());
}
inline std::string* DLData::release_status() {
  // @@protoc_insertion_point(field_release:datalink.DLData.status)
  return status_.Release();
}
inline void DLData::set_allocated_status(std::string* status) {
  if (status != nullptr) {
    
  } else {
    
  }
  status_.SetAllocated(status, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (status_.IsDefault()) {
    status_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:datalink.DLData.status)
}

// double lat = 4;
inline void DLData::clear_lat() {
  lat_ = 0;
}
inline double DLData::_internal_lat() const {
  return lat_;
}
inline double DLData::lat() const {
  // @@protoc_insertion_point(field_get:datalink.DLData.lat)
  return _internal_lat();
}
inline void DLData::_internal_set_lat(double value) {
  
  lat_ = value;
}
inline void DLData::set_lat(double value) {
  _internal_set_lat(value);
  // @@protoc_insertion_point(field_set:datalink.DLData.lat)
}

// double lon = 5;
inline void DLData::clear_lon() {
  lon_ = 0;
}
inline double DLData::_internal_lon() const {
  return lon_;
}
inline double DLData::lon() const {
  // @@protoc_insertion_point(field_get:datalink.DLData.lon)
  return _internal_lon();
}
inline void DLData::_internal_set_lon(double value) {
  
  lon_ = value;
}
inline void DLData::set_lon(double value) {
  _internal_set_lon(value);
  // @@protoc_insertion_point(field_set:datalink.DLData.lon)
}

// double velocity = 6;
inline void DLData::clear_velocity() {
  velocity_ = 0;
}
inline double DLData::_internal_velocity() const {
  return velocity_;
}
inline double DLData::velocity() const {
  // @@protoc_insertion_point(field_get:datalink.DLData.velocity)
  return _internal_velocity();
}
inline void DLData::_internal_set_velocity(double value) {
  
  velocity_ = value;
}
inline void DLData::set_velocity(double value) {
  _internal_set_velocity(value);
  // @@protoc_insertion_point(field_set:datalink.DLData.velocity)
}

// double baroAlt = 7;
inline void DLData::clear_baroalt() {
  baroalt_ = 0;
}
inline double DLData::_internal_baroalt() const {
  return baroalt_;
}
inline double DLData::baroalt() const {
  // @@protoc_insertion_point(field_get:datalink.DLData.baroAlt)
  return _internal_baroalt();
}
inline void DLData::_internal_set_baroalt(double value) {
  
  baroalt_ = value;
}
inline void DLData::set_baroalt(double value) {
  _internal_set_baroalt(value);
  // @@protoc_insertion_point(field_set:datalink.DLData.baroAlt)
}

// double geoAlt = 8;
inline void DLData::clear_geoalt() {
  geoalt_ = 0;
}
inline double DLData::_internal_geoalt() const {
  return geoalt_;
}
inline double DLData::geoalt() const {
  // @@protoc_insertion_point(field_get:datalink.DLData.geoAlt)
  return _internal_geoalt();
}
inline void DLData::_internal_set_geoalt(double value) {
  
  geoalt_ = value;
}
inline void DLData::set_geoalt(double value) {
  _internal_set_geoalt(value);
  // @@protoc_insertion_point(field_set:datalink.DLData.geoAlt)
}

// -------------------------------------------------------------------

// DLStreamResponse

// .datalink.DLData data = 1;
inline bool DLStreamResponse::_internal_has_data() const {
  return this != internal_default_instance() && data_ != nullptr;
}
inline bool DLStreamResponse::has_data() const {
  return _internal_has_data();
}
inline void DLStreamResponse::clear_data() {
  if (GetArenaForAllocation() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
}
inline const ::datalink::DLData& DLStreamResponse::_internal_data() const {
  const ::datalink::DLData* p = data_;
  return p != nullptr ? *p : reinterpret_cast<const ::datalink::DLData&>(
      ::datalink::_DLData_default_instance_);
}
inline const ::datalink::DLData& DLStreamResponse::data() const {
  // @@protoc_insertion_point(field_get:datalink.DLStreamResponse.data)
  return _internal_data();
}
inline void DLStreamResponse::unsafe_arena_set_allocated_data(
    ::datalink::DLData* data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(data_);
  }
  data_ = data;
  if (data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:datalink.DLStreamResponse.data)
}
inline ::datalink::DLData* DLStreamResponse::release_data() {
  
  ::datalink::DLData* temp = data_;
  data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::datalink::DLData* DLStreamResponse::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_release:datalink.DLStreamResponse.data)
  
  ::datalink::DLData* temp = data_;
  data_ = nullptr;
  return temp;
}
inline ::datalink::DLData* DLStreamResponse::_internal_mutable_data() {
  
  if (data_ == nullptr) {
    auto* p = CreateMaybeMessage<::datalink::DLData>(GetArenaForAllocation());
    data_ = p;
  }
  return data_;
}
inline ::datalink::DLData* DLStreamResponse::mutable_data() {
  ::datalink::DLData* _msg = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:datalink.DLStreamResponse.data)
  return _msg;
}
inline void DLStreamResponse::set_allocated_data(::datalink::DLData* data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete data_;
  }
  if (data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(data);
    if (message_arena != submessage_arena) {
      data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    
  } else {
    
  }
  data_ = data;
  // @@protoc_insertion_point(field_set_allocated:datalink.DLStreamResponse.data)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace datalink

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_datalink_2eproto
