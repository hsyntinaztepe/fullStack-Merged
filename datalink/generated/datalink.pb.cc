// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: datalink.proto

#include "datalink.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace datalink {
PROTOBUF_CONSTEXPR DLRequest::DLRequest(
    ::_pbi::ConstantInitialized){}
struct DLRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DLRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DLRequestDefaultTypeInternal() {}
  union {
    DLRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DLRequestDefaultTypeInternal _DLRequest_default_instance_;
PROTOBUF_CONSTEXPR DLData::DLData(
    ::_pbi::ConstantInitialized)
  : id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , callsign_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , status_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , lat_(0)
  , lon_(0)
  , velocity_(0)
  , baroalt_(0)
  , geoalt_(0){}
struct DLDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DLDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DLDataDefaultTypeInternal() {}
  union {
    DLData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DLDataDefaultTypeInternal _DLData_default_instance_;
PROTOBUF_CONSTEXPR DLStreamResponse::DLStreamResponse(
    ::_pbi::ConstantInitialized)
  : data_(nullptr){}
struct DLStreamResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DLStreamResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DLStreamResponseDefaultTypeInternal() {}
  union {
    DLStreamResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DLStreamResponseDefaultTypeInternal _DLStreamResponse_default_instance_;
}  // namespace datalink
static ::_pb::Metadata file_level_metadata_datalink_2eproto[3];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_datalink_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_datalink_2eproto = nullptr;

const uint32_t TableStruct_datalink_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::datalink::DLRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::datalink::DLData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::datalink::DLData, id_),
  PROTOBUF_FIELD_OFFSET(::datalink::DLData, callsign_),
  PROTOBUF_FIELD_OFFSET(::datalink::DLData, status_),
  PROTOBUF_FIELD_OFFSET(::datalink::DLData, lat_),
  PROTOBUF_FIELD_OFFSET(::datalink::DLData, lon_),
  PROTOBUF_FIELD_OFFSET(::datalink::DLData, velocity_),
  PROTOBUF_FIELD_OFFSET(::datalink::DLData, baroalt_),
  PROTOBUF_FIELD_OFFSET(::datalink::DLData, geoalt_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::datalink::DLStreamResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::datalink::DLStreamResponse, data_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::datalink::DLRequest)},
  { 6, -1, -1, sizeof(::datalink::DLData)},
  { 20, -1, -1, sizeof(::datalink::DLStreamResponse)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::datalink::_DLRequest_default_instance_._instance,
  &::datalink::_DLData_default_instance_._instance,
  &::datalink::_DLStreamResponse_default_instance_._instance,
};

const char descriptor_table_protodef_datalink_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\016datalink.proto\022\010datalink\"\013\n\tDLRequest\""
  "\203\001\n\006DLData\022\n\n\002id\030\001 \001(\t\022\020\n\010callsign\030\002 \001(\t"
  "\022\016\n\006status\030\003 \001(\t\022\013\n\003lat\030\004 \001(\001\022\013\n\003lon\030\005 \001"
  "(\001\022\020\n\010velocity\030\006 \001(\001\022\017\n\007baroAlt\030\007 \001(\001\022\016\n"
  "\006geoAlt\030\010 \001(\001\"2\n\020DLStreamResponse\022\036\n\004dat"
  "a\030\001 \001(\0132\020.datalink.DLData2O\n\010DataLink\022C\n"
  "\016StreamDataLink\022\023.datalink.DLRequest\032\032.d"
  "atalink.DLStreamResponse0\001b\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_datalink_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_datalink_2eproto = {
    false, false, 314, descriptor_table_protodef_datalink_2eproto,
    "datalink.proto",
    &descriptor_table_datalink_2eproto_once, nullptr, 0, 3,
    schemas, file_default_instances, TableStruct_datalink_2eproto::offsets,
    file_level_metadata_datalink_2eproto, file_level_enum_descriptors_datalink_2eproto,
    file_level_service_descriptors_datalink_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_datalink_2eproto_getter() {
  return &descriptor_table_datalink_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_datalink_2eproto(&descriptor_table_datalink_2eproto);
namespace datalink {

// ===================================================================

class DLRequest::_Internal {
 public:
};

DLRequest::DLRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:datalink.DLRequest)
}
DLRequest::DLRequest(const DLRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:datalink.DLRequest)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DLRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DLRequest::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata DLRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_datalink_2eproto_getter, &descriptor_table_datalink_2eproto_once,
      file_level_metadata_datalink_2eproto[0]);
}

// ===================================================================

class DLData::_Internal {
 public:
};

DLData::DLData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:datalink.DLData)
}
DLData::DLData(const DLData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    id_.Set(from._internal_id(), 
      GetArenaForAllocation());
  }
  callsign_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    callsign_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_callsign().empty()) {
    callsign_.Set(from._internal_callsign(), 
      GetArenaForAllocation());
  }
  status_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    status_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_status().empty()) {
    status_.Set(from._internal_status(), 
      GetArenaForAllocation());
  }
  ::memcpy(&lat_, &from.lat_,
    static_cast<size_t>(reinterpret_cast<char*>(&geoalt_) -
    reinterpret_cast<char*>(&lat_)) + sizeof(geoalt_));
  // @@protoc_insertion_point(copy_constructor:datalink.DLData)
}

inline void DLData::SharedCtor() {
id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
callsign_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  callsign_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
status_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  status_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&lat_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&geoalt_) -
    reinterpret_cast<char*>(&lat_)) + sizeof(geoalt_));
}

DLData::~DLData() {
  // @@protoc_insertion_point(destructor:datalink.DLData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DLData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  id_.Destroy();
  callsign_.Destroy();
  status_.Destroy();
}

void DLData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DLData::Clear() {
// @@protoc_insertion_point(message_clear_start:datalink.DLData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty();
  callsign_.ClearToEmpty();
  status_.ClearToEmpty();
  ::memset(&lat_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&geoalt_) -
      reinterpret_cast<char*>(&lat_)) + sizeof(geoalt_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DLData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "datalink.DLData.id"));
        } else
          goto handle_unusual;
        continue;
      // string callsign = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_callsign();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "datalink.DLData.callsign"));
        } else
          goto handle_unusual;
        continue;
      // string status = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_status();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "datalink.DLData.status"));
        } else
          goto handle_unusual;
        continue;
      // double lat = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          lat_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double lon = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 41)) {
          lon_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double velocity = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 49)) {
          velocity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double baroAlt = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 57)) {
          baroalt_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double geoAlt = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 65)) {
          geoalt_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DLData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:datalink.DLData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "datalink.DLData.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // string callsign = 2;
  if (!this->_internal_callsign().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_callsign().data(), static_cast<int>(this->_internal_callsign().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "datalink.DLData.callsign");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_callsign(), target);
  }

  // string status = 3;
  if (!this->_internal_status().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_status().data(), static_cast<int>(this->_internal_status().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "datalink.DLData.status");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_status(), target);
  }

  // double lat = 4;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_lat = this->_internal_lat();
  uint64_t raw_lat;
  memcpy(&raw_lat, &tmp_lat, sizeof(tmp_lat));
  if (raw_lat != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(4, this->_internal_lat(), target);
  }

  // double lon = 5;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_lon = this->_internal_lon();
  uint64_t raw_lon;
  memcpy(&raw_lon, &tmp_lon, sizeof(tmp_lon));
  if (raw_lon != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(5, this->_internal_lon(), target);
  }

  // double velocity = 6;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_velocity = this->_internal_velocity();
  uint64_t raw_velocity;
  memcpy(&raw_velocity, &tmp_velocity, sizeof(tmp_velocity));
  if (raw_velocity != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(6, this->_internal_velocity(), target);
  }

  // double baroAlt = 7;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_baroalt = this->_internal_baroalt();
  uint64_t raw_baroalt;
  memcpy(&raw_baroalt, &tmp_baroalt, sizeof(tmp_baroalt));
  if (raw_baroalt != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(7, this->_internal_baroalt(), target);
  }

  // double geoAlt = 8;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_geoalt = this->_internal_geoalt();
  uint64_t raw_geoalt;
  memcpy(&raw_geoalt, &tmp_geoalt, sizeof(tmp_geoalt));
  if (raw_geoalt != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(8, this->_internal_geoalt(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:datalink.DLData)
  return target;
}

size_t DLData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:datalink.DLData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string callsign = 2;
  if (!this->_internal_callsign().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_callsign());
  }

  // string status = 3;
  if (!this->_internal_status().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_status());
  }

  // double lat = 4;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_lat = this->_internal_lat();
  uint64_t raw_lat;
  memcpy(&raw_lat, &tmp_lat, sizeof(tmp_lat));
  if (raw_lat != 0) {
    total_size += 1 + 8;
  }

  // double lon = 5;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_lon = this->_internal_lon();
  uint64_t raw_lon;
  memcpy(&raw_lon, &tmp_lon, sizeof(tmp_lon));
  if (raw_lon != 0) {
    total_size += 1 + 8;
  }

  // double velocity = 6;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_velocity = this->_internal_velocity();
  uint64_t raw_velocity;
  memcpy(&raw_velocity, &tmp_velocity, sizeof(tmp_velocity));
  if (raw_velocity != 0) {
    total_size += 1 + 8;
  }

  // double baroAlt = 7;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_baroalt = this->_internal_baroalt();
  uint64_t raw_baroalt;
  memcpy(&raw_baroalt, &tmp_baroalt, sizeof(tmp_baroalt));
  if (raw_baroalt != 0) {
    total_size += 1 + 8;
  }

  // double geoAlt = 8;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_geoalt = this->_internal_geoalt();
  uint64_t raw_geoalt;
  memcpy(&raw_geoalt, &tmp_geoalt, sizeof(tmp_geoalt));
  if (raw_geoalt != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DLData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DLData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DLData::GetClassData() const { return &_class_data_; }

void DLData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DLData *>(to)->MergeFrom(
      static_cast<const DLData &>(from));
}


void DLData::MergeFrom(const DLData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:datalink.DLData)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _internal_set_id(from._internal_id());
  }
  if (!from._internal_callsign().empty()) {
    _internal_set_callsign(from._internal_callsign());
  }
  if (!from._internal_status().empty()) {
    _internal_set_status(from._internal_status());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_lat = from._internal_lat();
  uint64_t raw_lat;
  memcpy(&raw_lat, &tmp_lat, sizeof(tmp_lat));
  if (raw_lat != 0) {
    _internal_set_lat(from._internal_lat());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_lon = from._internal_lon();
  uint64_t raw_lon;
  memcpy(&raw_lon, &tmp_lon, sizeof(tmp_lon));
  if (raw_lon != 0) {
    _internal_set_lon(from._internal_lon());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_velocity = from._internal_velocity();
  uint64_t raw_velocity;
  memcpy(&raw_velocity, &tmp_velocity, sizeof(tmp_velocity));
  if (raw_velocity != 0) {
    _internal_set_velocity(from._internal_velocity());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_baroalt = from._internal_baroalt();
  uint64_t raw_baroalt;
  memcpy(&raw_baroalt, &tmp_baroalt, sizeof(tmp_baroalt));
  if (raw_baroalt != 0) {
    _internal_set_baroalt(from._internal_baroalt());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_geoalt = from._internal_geoalt();
  uint64_t raw_geoalt;
  memcpy(&raw_geoalt, &tmp_geoalt, sizeof(tmp_geoalt));
  if (raw_geoalt != 0) {
    _internal_set_geoalt(from._internal_geoalt());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DLData::CopyFrom(const DLData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:datalink.DLData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DLData::IsInitialized() const {
  return true;
}

void DLData::InternalSwap(DLData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &id_, lhs_arena,
      &other->id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &callsign_, lhs_arena,
      &other->callsign_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &status_, lhs_arena,
      &other->status_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DLData, geoalt_)
      + sizeof(DLData::geoalt_)
      - PROTOBUF_FIELD_OFFSET(DLData, lat_)>(
          reinterpret_cast<char*>(&lat_),
          reinterpret_cast<char*>(&other->lat_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DLData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_datalink_2eproto_getter, &descriptor_table_datalink_2eproto_once,
      file_level_metadata_datalink_2eproto[1]);
}

// ===================================================================

class DLStreamResponse::_Internal {
 public:
  static const ::datalink::DLData& data(const DLStreamResponse* msg);
};

const ::datalink::DLData&
DLStreamResponse::_Internal::data(const DLStreamResponse* msg) {
  return *msg->data_;
}
DLStreamResponse::DLStreamResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:datalink.DLStreamResponse)
}
DLStreamResponse::DLStreamResponse(const DLStreamResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_data()) {
    data_ = new ::datalink::DLData(*from.data_);
  } else {
    data_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:datalink.DLStreamResponse)
}

inline void DLStreamResponse::SharedCtor() {
data_ = nullptr;
}

DLStreamResponse::~DLStreamResponse() {
  // @@protoc_insertion_point(destructor:datalink.DLStreamResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DLStreamResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete data_;
}

void DLStreamResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DLStreamResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:datalink.DLStreamResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DLStreamResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .datalink.DLData data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DLStreamResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:datalink.DLStreamResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .datalink.DLData data = 1;
  if (this->_internal_has_data()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::data(this),
        _Internal::data(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:datalink.DLStreamResponse)
  return target;
}

size_t DLStreamResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:datalink.DLStreamResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .datalink.DLData data = 1;
  if (this->_internal_has_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *data_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DLStreamResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DLStreamResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DLStreamResponse::GetClassData() const { return &_class_data_; }

void DLStreamResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DLStreamResponse *>(to)->MergeFrom(
      static_cast<const DLStreamResponse &>(from));
}


void DLStreamResponse::MergeFrom(const DLStreamResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:datalink.DLStreamResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_data()) {
    _internal_mutable_data()->::datalink::DLData::MergeFrom(from._internal_data());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DLStreamResponse::CopyFrom(const DLStreamResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:datalink.DLStreamResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DLStreamResponse::IsInitialized() const {
  return true;
}

void DLStreamResponse::InternalSwap(DLStreamResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(data_, other->data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DLStreamResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_datalink_2eproto_getter, &descriptor_table_datalink_2eproto_once,
      file_level_metadata_datalink_2eproto[2]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace datalink
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::datalink::DLRequest*
Arena::CreateMaybeMessage< ::datalink::DLRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::datalink::DLRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::datalink::DLData*
Arena::CreateMaybeMessage< ::datalink::DLData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::datalink::DLData >(arena);
}
template<> PROTOBUF_NOINLINE ::datalink::DLStreamResponse*
Arena::CreateMaybeMessage< ::datalink::DLStreamResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::datalink::DLStreamResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
