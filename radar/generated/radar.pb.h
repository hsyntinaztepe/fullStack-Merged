// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: radar.proto
// Protobuf C++ Version: 6.31.1

#ifndef radar_2eproto_2epb_2eh
#define radar_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 6031001
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_radar_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_radar_2eproto {
  static const ::uint32_t offsets[];
};
extern "C" {
extern const ::google::protobuf::internal::DescriptorTable descriptor_table_radar_2eproto;
}  // extern "C"
namespace radar {
class RadarTarget;
struct RadarTargetDefaultTypeInternal;
extern RadarTargetDefaultTypeInternal _RadarTarget_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull RadarTarget_class_data_;
class StreamRequest;
struct StreamRequestDefaultTypeInternal;
extern StreamRequestDefaultTypeInternal _StreamRequest_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull StreamRequest_class_data_;
}  // namespace radar
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace radar {

// ===================================================================


// -------------------------------------------------------------------

class StreamRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:radar.StreamRequest) */ {
 public:
  inline StreamRequest() : StreamRequest(nullptr) {}
  ~StreamRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(StreamRequest* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(StreamRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR StreamRequest(::google::protobuf::internal::ConstantInitialized);

  inline StreamRequest(const StreamRequest& from) : StreamRequest(nullptr, from) {}
  inline StreamRequest(StreamRequest&& from) noexcept
      : StreamRequest(nullptr, ::std::move(from)) {}
  inline StreamRequest& operator=(const StreamRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline StreamRequest& operator=(StreamRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StreamRequest& default_instance() {
    return *reinterpret_cast<const StreamRequest*>(
        &_StreamRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(StreamRequest& a, StreamRequest& b) { a.Swap(&b); }
  inline void Swap(StreamRequest* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StreamRequest* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StreamRequest* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<StreamRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const StreamRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const StreamRequest& from) { StreamRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(StreamRequest* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "radar.StreamRequest"; }

 protected:
  explicit StreamRequest(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  StreamRequest(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const StreamRequest& from);
  StreamRequest(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, StreamRequest&& from) noexcept
      : StreamRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kFilterFieldNumber = 2,
    kRefreshIntervalMsFieldNumber = 1,
  };
  // string filter = 2;
  void clear_filter() ;
  const ::std::string& filter() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_filter(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_filter();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_filter();
  void set_allocated_filter(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_filter() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_filter(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_filter();

  public:
  // int32 refresh_interval_ms = 1;
  void clear_refresh_interval_ms() ;
  ::int32_t refresh_interval_ms() const;
  void set_refresh_interval_ms(::int32_t value);

  private:
  ::int32_t _internal_refresh_interval_ms() const;
  void _internal_set_refresh_interval_ms(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:radar.StreamRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<1, 2,
                                   0, 34,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const StreamRequest& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr filter_;
    ::int32_t refresh_interval_ms_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_radar_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull StreamRequest_class_data_;
// -------------------------------------------------------------------

class RadarTarget final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:radar.RadarTarget) */ {
 public:
  inline RadarTarget() : RadarTarget(nullptr) {}
  ~RadarTarget() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(RadarTarget* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(RadarTarget));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR RadarTarget(::google::protobuf::internal::ConstantInitialized);

  inline RadarTarget(const RadarTarget& from) : RadarTarget(nullptr, from) {}
  inline RadarTarget(RadarTarget&& from) noexcept
      : RadarTarget(nullptr, ::std::move(from)) {}
  inline RadarTarget& operator=(const RadarTarget& from) {
    CopyFrom(from);
    return *this;
  }
  inline RadarTarget& operator=(RadarTarget&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RadarTarget& default_instance() {
    return *reinterpret_cast<const RadarTarget*>(
        &_RadarTarget_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(RadarTarget& a, RadarTarget& b) { a.Swap(&b); }
  inline void Swap(RadarTarget* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RadarTarget* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RadarTarget* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<RadarTarget>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const RadarTarget& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const RadarTarget& from) { RadarTarget::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(RadarTarget* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "radar.RadarTarget"; }

 protected:
  explicit RadarTarget(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  RadarTarget(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const RadarTarget& from);
  RadarTarget(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, RadarTarget&& from) noexcept
      : RadarTarget(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kIdFieldNumber = 1,
    kLatFieldNumber = 2,
    kLonFieldNumber = 3,
    kVelocityFieldNumber = 4,
    kBaroAltitudeFieldNumber = 5,
    kHeadingFieldNumber = 7,
    kGeoAltitudeFieldNumber = 6,
    kIsFighterFieldNumber = 8,
  };
  // string id = 1;
  void clear_id() ;
  const ::std::string& id() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_id(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_id();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_id();
  void set_allocated_id(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_id() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_id(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_id();

  public:
  // double lat = 2;
  void clear_lat() ;
  double lat() const;
  void set_lat(double value);

  private:
  double _internal_lat() const;
  void _internal_set_lat(double value);

  public:
  // double lon = 3;
  void clear_lon() ;
  double lon() const;
  void set_lon(double value);

  private:
  double _internal_lon() const;
  void _internal_set_lon(double value);

  public:
  // int32 velocity = 4;
  void clear_velocity() ;
  ::int32_t velocity() const;
  void set_velocity(::int32_t value);

  private:
  ::int32_t _internal_velocity() const;
  void _internal_set_velocity(::int32_t value);

  public:
  // int32 baro_altitude = 5;
  void clear_baro_altitude() ;
  ::int32_t baro_altitude() const;
  void set_baro_altitude(::int32_t value);

  private:
  ::int32_t _internal_baro_altitude() const;
  void _internal_set_baro_altitude(::int32_t value);

  public:
  // double heading = 7;
  void clear_heading() ;
  double heading() const;
  void set_heading(double value);

  private:
  double _internal_heading() const;
  void _internal_set_heading(double value);

  public:
  // int32 geo_altitude = 6;
  void clear_geo_altitude() ;
  ::int32_t geo_altitude() const;
  void set_geo_altitude(::int32_t value);

  private:
  ::int32_t _internal_geo_altitude() const;
  void _internal_set_geo_altitude(::int32_t value);

  public:
  // bool is_fighter = 8;
  void clear_is_fighter() ;
  bool is_fighter() const;
  void set_is_fighter(bool value);

  private:
  bool _internal_is_fighter() const;
  void _internal_set_is_fighter(bool value);

  public:
  // @@protoc_insertion_point(class_scope:radar.RadarTarget)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<3, 8,
                                   0, 36,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const RadarTarget& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr id_;
    double lat_;
    double lon_;
    ::int32_t velocity_;
    ::int32_t baro_altitude_;
    double heading_;
    ::int32_t geo_altitude_;
    bool is_fighter_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_radar_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull RadarTarget_class_data_;

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// StreamRequest

// int32 refresh_interval_ms = 1;
inline void StreamRequest::clear_refresh_interval_ms() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.refresh_interval_ms_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::int32_t StreamRequest::refresh_interval_ms() const {
  // @@protoc_insertion_point(field_get:radar.StreamRequest.refresh_interval_ms)
  return _internal_refresh_interval_ms();
}
inline void StreamRequest::set_refresh_interval_ms(::int32_t value) {
  _internal_set_refresh_interval_ms(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:radar.StreamRequest.refresh_interval_ms)
}
inline ::int32_t StreamRequest::_internal_refresh_interval_ms() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.refresh_interval_ms_;
}
inline void StreamRequest::_internal_set_refresh_interval_ms(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.refresh_interval_ms_ = value;
}

// string filter = 2;
inline void StreamRequest::clear_filter() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.filter_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& StreamRequest::filter() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:radar.StreamRequest.filter)
  return _internal_filter();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void StreamRequest::set_filter(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.filter_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:radar.StreamRequest.filter)
}
inline ::std::string* PROTOBUF_NONNULL StreamRequest::mutable_filter()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::std::string* _s = _internal_mutable_filter();
  // @@protoc_insertion_point(field_mutable:radar.StreamRequest.filter)
  return _s;
}
inline const ::std::string& StreamRequest::_internal_filter() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.filter_.Get();
}
inline void StreamRequest::_internal_set_filter(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.filter_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL StreamRequest::_internal_mutable_filter() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.filter_.Mutable( GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE StreamRequest::release_filter() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:radar.StreamRequest.filter)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.filter_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.filter_.Set("", GetArena());
  }
  return released;
}
inline void StreamRequest::set_allocated_filter(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.filter_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.filter_.IsDefault()) {
    _impl_.filter_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:radar.StreamRequest.filter)
}

// -------------------------------------------------------------------

// RadarTarget

// string id = 1;
inline void RadarTarget::clear_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& RadarTarget::id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:radar.RadarTarget.id)
  return _internal_id();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void RadarTarget::set_id(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:radar.RadarTarget.id)
}
inline ::std::string* PROTOBUF_NONNULL RadarTarget::mutable_id()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:radar.RadarTarget.id)
  return _s;
}
inline const ::std::string& RadarTarget::_internal_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.id_.Get();
}
inline void RadarTarget::_internal_set_id(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.id_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL RadarTarget::_internal_mutable_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.id_.Mutable( GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE RadarTarget::release_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:radar.RadarTarget.id)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.id_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.id_.Set("", GetArena());
  }
  return released;
}
inline void RadarTarget::set_allocated_id(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.id_.IsDefault()) {
    _impl_.id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:radar.RadarTarget.id)
}

// double lat = 2;
inline void RadarTarget::clear_lat() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.lat_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline double RadarTarget::lat() const {
  // @@protoc_insertion_point(field_get:radar.RadarTarget.lat)
  return _internal_lat();
}
inline void RadarTarget::set_lat(double value) {
  _internal_set_lat(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:radar.RadarTarget.lat)
}
inline double RadarTarget::_internal_lat() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.lat_;
}
inline void RadarTarget::_internal_set_lat(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.lat_ = value;
}

// double lon = 3;
inline void RadarTarget::clear_lon() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.lon_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline double RadarTarget::lon() const {
  // @@protoc_insertion_point(field_get:radar.RadarTarget.lon)
  return _internal_lon();
}
inline void RadarTarget::set_lon(double value) {
  _internal_set_lon(value);
  _impl_._has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_set:radar.RadarTarget.lon)
}
inline double RadarTarget::_internal_lon() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.lon_;
}
inline void RadarTarget::_internal_set_lon(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.lon_ = value;
}

// int32 velocity = 4;
inline void RadarTarget::clear_velocity() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.velocity_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::int32_t RadarTarget::velocity() const {
  // @@protoc_insertion_point(field_get:radar.RadarTarget.velocity)
  return _internal_velocity();
}
inline void RadarTarget::set_velocity(::int32_t value) {
  _internal_set_velocity(value);
  _impl_._has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_set:radar.RadarTarget.velocity)
}
inline ::int32_t RadarTarget::_internal_velocity() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.velocity_;
}
inline void RadarTarget::_internal_set_velocity(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.velocity_ = value;
}

// int32 baro_altitude = 5;
inline void RadarTarget::clear_baro_altitude() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.baro_altitude_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::int32_t RadarTarget::baro_altitude() const {
  // @@protoc_insertion_point(field_get:radar.RadarTarget.baro_altitude)
  return _internal_baro_altitude();
}
inline void RadarTarget::set_baro_altitude(::int32_t value) {
  _internal_set_baro_altitude(value);
  _impl_._has_bits_[0] |= 0x00000010u;
  // @@protoc_insertion_point(field_set:radar.RadarTarget.baro_altitude)
}
inline ::int32_t RadarTarget::_internal_baro_altitude() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.baro_altitude_;
}
inline void RadarTarget::_internal_set_baro_altitude(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.baro_altitude_ = value;
}

// int32 geo_altitude = 6;
inline void RadarTarget::clear_geo_altitude() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.geo_altitude_ = 0;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline ::int32_t RadarTarget::geo_altitude() const {
  // @@protoc_insertion_point(field_get:radar.RadarTarget.geo_altitude)
  return _internal_geo_altitude();
}
inline void RadarTarget::set_geo_altitude(::int32_t value) {
  _internal_set_geo_altitude(value);
  _impl_._has_bits_[0] |= 0x00000040u;
  // @@protoc_insertion_point(field_set:radar.RadarTarget.geo_altitude)
}
inline ::int32_t RadarTarget::_internal_geo_altitude() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.geo_altitude_;
}
inline void RadarTarget::_internal_set_geo_altitude(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.geo_altitude_ = value;
}

// double heading = 7;
inline void RadarTarget::clear_heading() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.heading_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline double RadarTarget::heading() const {
  // @@protoc_insertion_point(field_get:radar.RadarTarget.heading)
  return _internal_heading();
}
inline void RadarTarget::set_heading(double value) {
  _internal_set_heading(value);
  _impl_._has_bits_[0] |= 0x00000020u;
  // @@protoc_insertion_point(field_set:radar.RadarTarget.heading)
}
inline double RadarTarget::_internal_heading() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.heading_;
}
inline void RadarTarget::_internal_set_heading(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.heading_ = value;
}

// bool is_fighter = 8;
inline void RadarTarget::clear_is_fighter() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.is_fighter_ = false;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline bool RadarTarget::is_fighter() const {
  // @@protoc_insertion_point(field_get:radar.RadarTarget.is_fighter)
  return _internal_is_fighter();
}
inline void RadarTarget::set_is_fighter(bool value) {
  _internal_set_is_fighter(value);
  _impl_._has_bits_[0] |= 0x00000080u;
  // @@protoc_insertion_point(field_set:radar.RadarTarget.is_fighter)
}
inline bool RadarTarget::_internal_is_fighter() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.is_fighter_;
}
inline void RadarTarget::_internal_set_is_fighter(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.is_fighter_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace radar


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // radar_2eproto_2epb_2eh
