// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: radar.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_radar_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_radar_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_radar_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_radar_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_radar_2eproto;
namespace radar {
class RadarTarget;
struct RadarTargetDefaultTypeInternal;
extern RadarTargetDefaultTypeInternal _RadarTarget_default_instance_;
class StreamRequest;
struct StreamRequestDefaultTypeInternal;
extern StreamRequestDefaultTypeInternal _StreamRequest_default_instance_;
}  // namespace radar
PROTOBUF_NAMESPACE_OPEN
template<> ::radar::RadarTarget* Arena::CreateMaybeMessage<::radar::RadarTarget>(Arena*);
template<> ::radar::StreamRequest* Arena::CreateMaybeMessage<::radar::StreamRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace radar {

// ===================================================================

class RadarTarget final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:radar.RadarTarget) */ {
 public:
  inline RadarTarget() : RadarTarget(nullptr) {}
  ~RadarTarget() override;
  explicit PROTOBUF_CONSTEXPR RadarTarget(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RadarTarget(const RadarTarget& from);
  RadarTarget(RadarTarget&& from) noexcept
    : RadarTarget() {
    *this = ::std::move(from);
  }

  inline RadarTarget& operator=(const RadarTarget& from) {
    CopyFrom(from);
    return *this;
  }
  inline RadarTarget& operator=(RadarTarget&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RadarTarget& default_instance() {
    return *internal_default_instance();
  }
  static inline const RadarTarget* internal_default_instance() {
    return reinterpret_cast<const RadarTarget*>(
               &_RadarTarget_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(RadarTarget& a, RadarTarget& b) {
    a.Swap(&b);
  }
  inline void Swap(RadarTarget* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RadarTarget* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RadarTarget* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RadarTarget>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RadarTarget& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RadarTarget& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RadarTarget* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "radar.RadarTarget";
  }
  protected:
  explicit RadarTarget(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLatFieldNumber = 1,
    kLonFieldNumber = 2,
    kVelocityFieldNumber = 3,
    kBaroAltitudeFieldNumber = 4,
    kGeoAltitudeFieldNumber = 5,
  };
  // double lat = 1;
  void clear_lat();
  double lat() const;
  void set_lat(double value);
  private:
  double _internal_lat() const;
  void _internal_set_lat(double value);
  public:

  // double lon = 2;
  void clear_lon();
  double lon() const;
  void set_lon(double value);
  private:
  double _internal_lon() const;
  void _internal_set_lon(double value);
  public:

  // int32 velocity = 3;
  void clear_velocity();
  int32_t velocity() const;
  void set_velocity(int32_t value);
  private:
  int32_t _internal_velocity() const;
  void _internal_set_velocity(int32_t value);
  public:

  // int32 baro_altitude = 4;
  void clear_baro_altitude();
  int32_t baro_altitude() const;
  void set_baro_altitude(int32_t value);
  private:
  int32_t _internal_baro_altitude() const;
  void _internal_set_baro_altitude(int32_t value);
  public:

  // int32 geo_altitude = 5;
  void clear_geo_altitude();
  int32_t geo_altitude() const;
  void set_geo_altitude(int32_t value);
  private:
  int32_t _internal_geo_altitude() const;
  void _internal_set_geo_altitude(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:radar.RadarTarget)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double lat_;
  double lon_;
  int32_t velocity_;
  int32_t baro_altitude_;
  int32_t geo_altitude_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_radar_2eproto;
};
// -------------------------------------------------------------------

class StreamRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:radar.StreamRequest) */ {
 public:
  inline StreamRequest() : StreamRequest(nullptr) {}
  ~StreamRequest() override;
  explicit PROTOBUF_CONSTEXPR StreamRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StreamRequest(const StreamRequest& from);
  StreamRequest(StreamRequest&& from) noexcept
    : StreamRequest() {
    *this = ::std::move(from);
  }

  inline StreamRequest& operator=(const StreamRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline StreamRequest& operator=(StreamRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StreamRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const StreamRequest* internal_default_instance() {
    return reinterpret_cast<const StreamRequest*>(
               &_StreamRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(StreamRequest& a, StreamRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(StreamRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StreamRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StreamRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StreamRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StreamRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const StreamRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StreamRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "radar.StreamRequest";
  }
  protected:
  explicit StreamRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRefreshIntervalMsFieldNumber = 1,
  };
  // int32 refresh_interval_ms = 1;
  void clear_refresh_interval_ms();
  int32_t refresh_interval_ms() const;
  void set_refresh_interval_ms(int32_t value);
  private:
  int32_t _internal_refresh_interval_ms() const;
  void _internal_set_refresh_interval_ms(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:radar.StreamRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int32_t refresh_interval_ms_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_radar_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RadarTarget

// double lat = 1;
inline void RadarTarget::clear_lat() {
  lat_ = 0;
}
inline double RadarTarget::_internal_lat() const {
  return lat_;
}
inline double RadarTarget::lat() const {
  // @@protoc_insertion_point(field_get:radar.RadarTarget.lat)
  return _internal_lat();
}
inline void RadarTarget::_internal_set_lat(double value) {
  
  lat_ = value;
}
inline void RadarTarget::set_lat(double value) {
  _internal_set_lat(value);
  // @@protoc_insertion_point(field_set:radar.RadarTarget.lat)
}

// double lon = 2;
inline void RadarTarget::clear_lon() {
  lon_ = 0;
}
inline double RadarTarget::_internal_lon() const {
  return lon_;
}
inline double RadarTarget::lon() const {
  // @@protoc_insertion_point(field_get:radar.RadarTarget.lon)
  return _internal_lon();
}
inline void RadarTarget::_internal_set_lon(double value) {
  
  lon_ = value;
}
inline void RadarTarget::set_lon(double value) {
  _internal_set_lon(value);
  // @@protoc_insertion_point(field_set:radar.RadarTarget.lon)
}

// int32 velocity = 3;
inline void RadarTarget::clear_velocity() {
  velocity_ = 0;
}
inline int32_t RadarTarget::_internal_velocity() const {
  return velocity_;
}
inline int32_t RadarTarget::velocity() const {
  // @@protoc_insertion_point(field_get:radar.RadarTarget.velocity)
  return _internal_velocity();
}
inline void RadarTarget::_internal_set_velocity(int32_t value) {
  
  velocity_ = value;
}
inline void RadarTarget::set_velocity(int32_t value) {
  _internal_set_velocity(value);
  // @@protoc_insertion_point(field_set:radar.RadarTarget.velocity)
}

// int32 baro_altitude = 4;
inline void RadarTarget::clear_baro_altitude() {
  baro_altitude_ = 0;
}
inline int32_t RadarTarget::_internal_baro_altitude() const {
  return baro_altitude_;
}
inline int32_t RadarTarget::baro_altitude() const {
  // @@protoc_insertion_point(field_get:radar.RadarTarget.baro_altitude)
  return _internal_baro_altitude();
}
inline void RadarTarget::_internal_set_baro_altitude(int32_t value) {
  
  baro_altitude_ = value;
}
inline void RadarTarget::set_baro_altitude(int32_t value) {
  _internal_set_baro_altitude(value);
  // @@protoc_insertion_point(field_set:radar.RadarTarget.baro_altitude)
}

// int32 geo_altitude = 5;
inline void RadarTarget::clear_geo_altitude() {
  geo_altitude_ = 0;
}
inline int32_t RadarTarget::_internal_geo_altitude() const {
  return geo_altitude_;
}
inline int32_t RadarTarget::geo_altitude() const {
  // @@protoc_insertion_point(field_get:radar.RadarTarget.geo_altitude)
  return _internal_geo_altitude();
}
inline void RadarTarget::_internal_set_geo_altitude(int32_t value) {
  
  geo_altitude_ = value;
}
inline void RadarTarget::set_geo_altitude(int32_t value) {
  _internal_set_geo_altitude(value);
  // @@protoc_insertion_point(field_set:radar.RadarTarget.geo_altitude)
}

// -------------------------------------------------------------------

// StreamRequest

// int32 refresh_interval_ms = 1;
inline void StreamRequest::clear_refresh_interval_ms() {
  refresh_interval_ms_ = 0;
}
inline int32_t StreamRequest::_internal_refresh_interval_ms() const {
  return refresh_interval_ms_;
}
inline int32_t StreamRequest::refresh_interval_ms() const {
  // @@protoc_insertion_point(field_get:radar.StreamRequest.refresh_interval_ms)
  return _internal_refresh_interval_ms();
}
inline void StreamRequest::_internal_set_refresh_interval_ms(int32_t value) {
  
  refresh_interval_ms_ = value;
}
inline void StreamRequest::set_refresh_interval_ms(int32_t value) {
  _internal_set_refresh_interval_ms(value);
  // @@protoc_insertion_point(field_set:radar.StreamRequest.refresh_interval_ms)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace radar

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_radar_2eproto
