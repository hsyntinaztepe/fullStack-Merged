// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: radar.proto
// Protobuf C++ Version: 6.31.1

#include "radar.pb.h"

#include <algorithm>
#include <type_traits>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/generated_message_tctable_impl.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace radar {

inline constexpr StreamRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        filter_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        refresh_interval_ms_{0} {}

template <typename>
PROTOBUF_CONSTEXPR StreamRequest::StreamRequest(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(StreamRequest_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct StreamRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StreamRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~StreamRequestDefaultTypeInternal() {}
  union {
    StreamRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StreamRequestDefaultTypeInternal _StreamRequest_default_instance_;

inline constexpr RadarTarget::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        lat_{0},
        lon_{0},
        velocity_{0},
        baro_altitude_{0},
        heading_{0},
        geo_altitude_{0},
        is_fighter_{false} {}

template <typename>
PROTOBUF_CONSTEXPR RadarTarget::RadarTarget(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(RadarTarget_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct RadarTargetDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RadarTargetDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RadarTargetDefaultTypeInternal() {}
  union {
    RadarTarget _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RadarTargetDefaultTypeInternal _RadarTarget_default_instance_;
}  // namespace radar
static constexpr const ::_pb::EnumDescriptor *PROTOBUF_NONNULL *PROTOBUF_NULLABLE
    file_level_enum_descriptors_radar_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor *PROTOBUF_NONNULL *PROTOBUF_NULLABLE
    file_level_service_descriptors_radar_2eproto = nullptr;
const ::uint32_t
    TableStruct_radar_2eproto::offsets[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
        protodesc_cold) = {
        0x081, // bitmap
        PROTOBUF_FIELD_OFFSET(::radar::StreamRequest, _impl_._has_bits_),
        5, // hasbit index offset
        PROTOBUF_FIELD_OFFSET(::radar::StreamRequest, _impl_.refresh_interval_ms_),
        PROTOBUF_FIELD_OFFSET(::radar::StreamRequest, _impl_.filter_),
        1,
        0,
        0x081, // bitmap
        PROTOBUF_FIELD_OFFSET(::radar::RadarTarget, _impl_._has_bits_),
        11, // hasbit index offset
        PROTOBUF_FIELD_OFFSET(::radar::RadarTarget, _impl_.id_),
        PROTOBUF_FIELD_OFFSET(::radar::RadarTarget, _impl_.lat_),
        PROTOBUF_FIELD_OFFSET(::radar::RadarTarget, _impl_.lon_),
        PROTOBUF_FIELD_OFFSET(::radar::RadarTarget, _impl_.velocity_),
        PROTOBUF_FIELD_OFFSET(::radar::RadarTarget, _impl_.baro_altitude_),
        PROTOBUF_FIELD_OFFSET(::radar::RadarTarget, _impl_.geo_altitude_),
        PROTOBUF_FIELD_OFFSET(::radar::RadarTarget, _impl_.heading_),
        PROTOBUF_FIELD_OFFSET(::radar::RadarTarget, _impl_.is_fighter_),
        0,
        1,
        2,
        3,
        4,
        6,
        5,
        7,
};

static const ::_pbi::MigrationSchema
    schemas[] ABSL_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
        {0, sizeof(::radar::StreamRequest)},
        {7, sizeof(::radar::RadarTarget)},
};
static const ::_pb::Message* PROTOBUF_NONNULL const file_default_instances[] = {
    &::radar::_StreamRequest_default_instance_._instance,
    &::radar::_RadarTarget_default_instance_._instance,
};
const char descriptor_table_protodef_radar_2eproto[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
    protodesc_cold) = {
    "\n\013radar.proto\022\005radar\"<\n\rStreamRequest\022\033\n"
    "\023refresh_interval_ms\030\001 \001(\005\022\016\n\006filter\030\002 \001"
    "(\t\"\227\001\n\013RadarTarget\022\n\n\002id\030\001 \001(\t\022\013\n\003lat\030\002 "
    "\001(\001\022\013\n\003lon\030\003 \001(\001\022\020\n\010velocity\030\004 \001(\005\022\025\n\rba"
    "ro_altitude\030\005 \001(\005\022\024\n\014geo_altitude\030\006 \001(\005\022"
    "\017\n\007heading\030\007 \001(\001\022\022\n\nis_fighter\030\010 \001(\0102P\n\014"
    "RadarService\022@\n\022StreamRadarTargets\022\024.rad"
    "ar.StreamRequest\032\022.radar.RadarTarget0\001b\006"
    "proto3"
};
static ::absl::once_flag descriptor_table_radar_2eproto_once;
PROTOBUF_CONSTINIT const ::_pbi::DescriptorTable descriptor_table_radar_2eproto = {
    false,
    false,
    326,
    descriptor_table_protodef_radar_2eproto,
    "radar.proto",
    &descriptor_table_radar_2eproto_once,
    nullptr,
    0,
    2,
    schemas,
    file_default_instances,
    TableStruct_radar_2eproto::offsets,
    file_level_enum_descriptors_radar_2eproto,
    file_level_service_descriptors_radar_2eproto,
};
namespace radar {
// ===================================================================

class StreamRequest::_Internal {
 public:
  using HasBits =
      decltype(::std::declval<StreamRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(StreamRequest, _impl_._has_bits_);
};

StreamRequest::StreamRequest(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, StreamRequest_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:radar.StreamRequest)
}
PROTOBUF_NDEBUG_INLINE StreamRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::radar::StreamRequest& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        filter_(arena, from.filter_) {}

StreamRequest::StreamRequest(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const StreamRequest& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, StreamRequest_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  StreamRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  _impl_.refresh_interval_ms_ = from._impl_.refresh_interval_ms_;

  // @@protoc_insertion_point(copy_constructor:radar.StreamRequest)
}
PROTOBUF_NDEBUG_INLINE StreamRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0},
        filter_(arena) {}

inline void StreamRequest::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.refresh_interval_ms_ = {};
}
StreamRequest::~StreamRequest() {
  // @@protoc_insertion_point(destructor:radar.StreamRequest)
  SharedDtor(*this);
}
inline void StreamRequest::SharedDtor(MessageLite& self) {
  StreamRequest& this_ = static_cast<StreamRequest&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.filter_.Destroy();
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL StreamRequest::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) StreamRequest(arena);
}
constexpr auto StreamRequest::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(StreamRequest),
                                            alignof(StreamRequest));
}
constexpr auto StreamRequest::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_StreamRequest_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &StreamRequest::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<StreamRequest>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &StreamRequest::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<StreamRequest>(), &StreamRequest::ByteSizeLong,
              &StreamRequest::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(StreamRequest, _impl_._cached_size_),
          false,
      },
      &StreamRequest::kDescriptorMethods,
      &descriptor_table_radar_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const
    ::google::protobuf::internal::ClassDataFull StreamRequest_class_data_ =
        StreamRequest::InternalGenerateClassData_();

PROTOBUF_ATTRIBUTE_WEAK const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL
StreamRequest::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&StreamRequest_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(StreamRequest_class_data_.tc_table);
  return StreamRequest_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 34, 2>
StreamRequest::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(StreamRequest, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    StreamRequest_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::radar::StreamRequest>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // string filter = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 0, 0, PROTOBUF_FIELD_OFFSET(StreamRequest, _impl_.filter_)}},
    // int32 refresh_interval_ms = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(StreamRequest, _impl_.refresh_interval_ms_), 1>(),
     {8, 1, 0, PROTOBUF_FIELD_OFFSET(StreamRequest, _impl_.refresh_interval_ms_)}},
  }}, {{
    65535, 65535
  }}, {{
    // int32 refresh_interval_ms = 1;
    {PROTOBUF_FIELD_OFFSET(StreamRequest, _impl_.refresh_interval_ms_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // string filter = 2;
    {PROTOBUF_FIELD_OFFSET(StreamRequest, _impl_.filter_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\23\0\6\0\0\0\0\0"
    "radar.StreamRequest"
    "filter"
  }},
};
PROTOBUF_NOINLINE void StreamRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:radar.StreamRequest)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000001u) != 0) {
    _impl_.filter_.ClearNonDefaultToEmpty();
  }
  _impl_.refresh_interval_ms_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL StreamRequest::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const StreamRequest& this_ = static_cast<const StreamRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL StreamRequest::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const StreamRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:radar.StreamRequest)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // int32 refresh_interval_ms = 1;
  if ((this_._impl_._has_bits_[0] & 0x00000002u) != 0) {
    if (this_._internal_refresh_interval_ms() != 0) {
      target =
          ::google::protobuf::internal::WireFormatLite::WriteInt32ToArrayWithField<1>(
              stream, this_._internal_refresh_interval_ms(), target);
    }
  }

  // string filter = 2;
  if ((this_._impl_._has_bits_[0] & 0x00000001u) != 0) {
    if (!this_._internal_filter().empty()) {
      const ::std::string& _s = this_._internal_filter();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "radar.StreamRequest.filter");
      target = stream->WriteStringMaybeAliased(2, _s, target);
    }
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:radar.StreamRequest)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t StreamRequest::ByteSizeLong(const MessageLite& base) {
  const StreamRequest& this_ = static_cast<const StreamRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t StreamRequest::ByteSizeLong() const {
  const StreamRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:radar.StreamRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000003u) != 0) {
    // string filter = 2;
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (!this_._internal_filter().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_filter());
      }
    }
    // int32 refresh_interval_ms = 1;
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (this_._internal_refresh_interval_ms() != 0) {
        total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
            this_._internal_refresh_interval_ms());
      }
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void StreamRequest::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<StreamRequest*>(&to_msg);
  auto& from = static_cast<const StreamRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:radar.StreamRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000003u) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (!from._internal_filter().empty()) {
        _this->_internal_set_filter(from._internal_filter());
      } else {
        if (_this->_impl_.filter_.IsDefault()) {
          _this->_internal_set_filter("");
        }
      }
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (from._internal_refresh_interval_ms() != 0) {
        _this->_impl_.refresh_interval_ms_ = from._impl_.refresh_interval_ms_;
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void StreamRequest::CopyFrom(const StreamRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:radar.StreamRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void StreamRequest::InternalSwap(StreamRequest* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using ::std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.filter_, &other->_impl_.filter_, arena);
  swap(_impl_.refresh_interval_ms_, other->_impl_.refresh_interval_ms_);
}

::google::protobuf::Metadata StreamRequest::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class RadarTarget::_Internal {
 public:
  using HasBits =
      decltype(::std::declval<RadarTarget>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(RadarTarget, _impl_._has_bits_);
};

RadarTarget::RadarTarget(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, RadarTarget_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:radar.RadarTarget)
}
PROTOBUF_NDEBUG_INLINE RadarTarget::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::radar::RadarTarget& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        id_(arena, from.id_) {}

RadarTarget::RadarTarget(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const RadarTarget& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, RadarTarget_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  RadarTarget* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, lat_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, lat_),
           offsetof(Impl_, is_fighter_) -
               offsetof(Impl_, lat_) +
               sizeof(Impl_::is_fighter_));

  // @@protoc_insertion_point(copy_constructor:radar.RadarTarget)
}
PROTOBUF_NDEBUG_INLINE RadarTarget::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0},
        id_(arena) {}

inline void RadarTarget::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, lat_),
           0,
           offsetof(Impl_, is_fighter_) -
               offsetof(Impl_, lat_) +
               sizeof(Impl_::is_fighter_));
}
RadarTarget::~RadarTarget() {
  // @@protoc_insertion_point(destructor:radar.RadarTarget)
  SharedDtor(*this);
}
inline void RadarTarget::SharedDtor(MessageLite& self) {
  RadarTarget& this_ = static_cast<RadarTarget&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.id_.Destroy();
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL RadarTarget::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) RadarTarget(arena);
}
constexpr auto RadarTarget::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(RadarTarget),
                                            alignof(RadarTarget));
}
constexpr auto RadarTarget::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_RadarTarget_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &RadarTarget::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<RadarTarget>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &RadarTarget::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<RadarTarget>(), &RadarTarget::ByteSizeLong,
              &RadarTarget::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(RadarTarget, _impl_._cached_size_),
          false,
      },
      &RadarTarget::kDescriptorMethods,
      &descriptor_table_radar_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const
    ::google::protobuf::internal::ClassDataFull RadarTarget_class_data_ =
        RadarTarget::InternalGenerateClassData_();

PROTOBUF_ATTRIBUTE_WEAK const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL
RadarTarget::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&RadarTarget_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(RadarTarget_class_data_.tc_table);
  return RadarTarget_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 8, 0, 36, 2>
RadarTarget::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(RadarTarget, _impl_._has_bits_),
    0, // no _extensions_
    8, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967040,  // skipmap
    offsetof(decltype(_table_), field_entries),
    8,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    RadarTarget_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::radar::RadarTarget>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // bool is_fighter = 8;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(RadarTarget, _impl_.is_fighter_), 7>(),
     {64, 7, 0, PROTOBUF_FIELD_OFFSET(RadarTarget, _impl_.is_fighter_)}},
    // string id = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(RadarTarget, _impl_.id_)}},
    // double lat = 2;
    {::_pbi::TcParser::FastF64S1,
     {17, 1, 0, PROTOBUF_FIELD_OFFSET(RadarTarget, _impl_.lat_)}},
    // double lon = 3;
    {::_pbi::TcParser::FastF64S1,
     {25, 2, 0, PROTOBUF_FIELD_OFFSET(RadarTarget, _impl_.lon_)}},
    // int32 velocity = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(RadarTarget, _impl_.velocity_), 3>(),
     {32, 3, 0, PROTOBUF_FIELD_OFFSET(RadarTarget, _impl_.velocity_)}},
    // int32 baro_altitude = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(RadarTarget, _impl_.baro_altitude_), 4>(),
     {40, 4, 0, PROTOBUF_FIELD_OFFSET(RadarTarget, _impl_.baro_altitude_)}},
    // int32 geo_altitude = 6;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(RadarTarget, _impl_.geo_altitude_), 6>(),
     {48, 6, 0, PROTOBUF_FIELD_OFFSET(RadarTarget, _impl_.geo_altitude_)}},
    // double heading = 7;
    {::_pbi::TcParser::FastF64S1,
     {57, 5, 0, PROTOBUF_FIELD_OFFSET(RadarTarget, _impl_.heading_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string id = 1;
    {PROTOBUF_FIELD_OFFSET(RadarTarget, _impl_.id_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // double lat = 2;
    {PROTOBUF_FIELD_OFFSET(RadarTarget, _impl_.lat_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // double lon = 3;
    {PROTOBUF_FIELD_OFFSET(RadarTarget, _impl_.lon_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // int32 velocity = 4;
    {PROTOBUF_FIELD_OFFSET(RadarTarget, _impl_.velocity_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // int32 baro_altitude = 5;
    {PROTOBUF_FIELD_OFFSET(RadarTarget, _impl_.baro_altitude_), _Internal::kHasBitsOffset + 4, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // int32 geo_altitude = 6;
    {PROTOBUF_FIELD_OFFSET(RadarTarget, _impl_.geo_altitude_), _Internal::kHasBitsOffset + 6, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // double heading = 7;
    {PROTOBUF_FIELD_OFFSET(RadarTarget, _impl_.heading_), _Internal::kHasBitsOffset + 5, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // bool is_fighter = 8;
    {PROTOBUF_FIELD_OFFSET(RadarTarget, _impl_.is_fighter_), _Internal::kHasBitsOffset + 7, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
  }},
  // no aux_entries
  {{
    "\21\2\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
    "radar.RadarTarget"
    "id"
  }},
};
PROTOBUF_NOINLINE void RadarTarget::Clear() {
// @@protoc_insertion_point(message_clear_start:radar.RadarTarget)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000001u) != 0) {
    _impl_.id_.ClearNonDefaultToEmpty();
  }
  if ((cached_has_bits & 0x000000feu) != 0) {
    ::memset(&_impl_.lat_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.is_fighter_) -
        reinterpret_cast<char*>(&_impl_.lat_)) + sizeof(_impl_.is_fighter_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL RadarTarget::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const RadarTarget& this_ = static_cast<const RadarTarget&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL RadarTarget::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const RadarTarget& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:radar.RadarTarget)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string id = 1;
  if ((this_._impl_._has_bits_[0] & 0x00000001u) != 0) {
    if (!this_._internal_id().empty()) {
      const ::std::string& _s = this_._internal_id();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "radar.RadarTarget.id");
      target = stream->WriteStringMaybeAliased(1, _s, target);
    }
  }

  // double lat = 2;
  if ((this_._impl_._has_bits_[0] & 0x00000002u) != 0) {
    if (::absl::bit_cast<::uint64_t>(this_._internal_lat()) != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteDoubleToArray(
          2, this_._internal_lat(), target);
    }
  }

  // double lon = 3;
  if ((this_._impl_._has_bits_[0] & 0x00000004u) != 0) {
    if (::absl::bit_cast<::uint64_t>(this_._internal_lon()) != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteDoubleToArray(
          3, this_._internal_lon(), target);
    }
  }

  // int32 velocity = 4;
  if ((this_._impl_._has_bits_[0] & 0x00000008u) != 0) {
    if (this_._internal_velocity() != 0) {
      target =
          ::google::protobuf::internal::WireFormatLite::WriteInt32ToArrayWithField<4>(
              stream, this_._internal_velocity(), target);
    }
  }

  // int32 baro_altitude = 5;
  if ((this_._impl_._has_bits_[0] & 0x00000010u) != 0) {
    if (this_._internal_baro_altitude() != 0) {
      target =
          ::google::protobuf::internal::WireFormatLite::WriteInt32ToArrayWithField<5>(
              stream, this_._internal_baro_altitude(), target);
    }
  }

  // int32 geo_altitude = 6;
  if ((this_._impl_._has_bits_[0] & 0x00000040u) != 0) {
    if (this_._internal_geo_altitude() != 0) {
      target =
          ::google::protobuf::internal::WireFormatLite::WriteInt32ToArrayWithField<6>(
              stream, this_._internal_geo_altitude(), target);
    }
  }

  // double heading = 7;
  if ((this_._impl_._has_bits_[0] & 0x00000020u) != 0) {
    if (::absl::bit_cast<::uint64_t>(this_._internal_heading()) != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteDoubleToArray(
          7, this_._internal_heading(), target);
    }
  }

  // bool is_fighter = 8;
  if ((this_._impl_._has_bits_[0] & 0x00000080u) != 0) {
    if (this_._internal_is_fighter() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteBoolToArray(
          8, this_._internal_is_fighter(), target);
    }
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:radar.RadarTarget)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t RadarTarget::ByteSizeLong(const MessageLite& base) {
  const RadarTarget& this_ = static_cast<const RadarTarget&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t RadarTarget::ByteSizeLong() const {
  const RadarTarget& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:radar.RadarTarget)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x000000ffu) != 0) {
    // string id = 1;
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (!this_._internal_id().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_id());
      }
    }
    // double lat = 2;
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (::absl::bit_cast<::uint64_t>(this_._internal_lat()) != 0) {
        total_size += 9;
      }
    }
    // double lon = 3;
    if ((cached_has_bits & 0x00000004u) != 0) {
      if (::absl::bit_cast<::uint64_t>(this_._internal_lon()) != 0) {
        total_size += 9;
      }
    }
    // int32 velocity = 4;
    if ((cached_has_bits & 0x00000008u) != 0) {
      if (this_._internal_velocity() != 0) {
        total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
            this_._internal_velocity());
      }
    }
    // int32 baro_altitude = 5;
    if ((cached_has_bits & 0x00000010u) != 0) {
      if (this_._internal_baro_altitude() != 0) {
        total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
            this_._internal_baro_altitude());
      }
    }
    // double heading = 7;
    if ((cached_has_bits & 0x00000020u) != 0) {
      if (::absl::bit_cast<::uint64_t>(this_._internal_heading()) != 0) {
        total_size += 9;
      }
    }
    // int32 geo_altitude = 6;
    if ((cached_has_bits & 0x00000040u) != 0) {
      if (this_._internal_geo_altitude() != 0) {
        total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
            this_._internal_geo_altitude());
      }
    }
    // bool is_fighter = 8;
    if ((cached_has_bits & 0x00000080u) != 0) {
      if (this_._internal_is_fighter() != 0) {
        total_size += 2;
      }
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void RadarTarget::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<RadarTarget*>(&to_msg);
  auto& from = static_cast<const RadarTarget&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:radar.RadarTarget)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x000000ffu) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (!from._internal_id().empty()) {
        _this->_internal_set_id(from._internal_id());
      } else {
        if (_this->_impl_.id_.IsDefault()) {
          _this->_internal_set_id("");
        }
      }
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (::absl::bit_cast<::uint64_t>(from._internal_lat()) != 0) {
        _this->_impl_.lat_ = from._impl_.lat_;
      }
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      if (::absl::bit_cast<::uint64_t>(from._internal_lon()) != 0) {
        _this->_impl_.lon_ = from._impl_.lon_;
      }
    }
    if ((cached_has_bits & 0x00000008u) != 0) {
      if (from._internal_velocity() != 0) {
        _this->_impl_.velocity_ = from._impl_.velocity_;
      }
    }
    if ((cached_has_bits & 0x00000010u) != 0) {
      if (from._internal_baro_altitude() != 0) {
        _this->_impl_.baro_altitude_ = from._impl_.baro_altitude_;
      }
    }
    if ((cached_has_bits & 0x00000020u) != 0) {
      if (::absl::bit_cast<::uint64_t>(from._internal_heading()) != 0) {
        _this->_impl_.heading_ = from._impl_.heading_;
      }
    }
    if ((cached_has_bits & 0x00000040u) != 0) {
      if (from._internal_geo_altitude() != 0) {
        _this->_impl_.geo_altitude_ = from._impl_.geo_altitude_;
      }
    }
    if ((cached_has_bits & 0x00000080u) != 0) {
      if (from._internal_is_fighter() != 0) {
        _this->_impl_.is_fighter_ = from._impl_.is_fighter_;
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void RadarTarget::CopyFrom(const RadarTarget& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:radar.RadarTarget)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void RadarTarget::InternalSwap(RadarTarget* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using ::std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.id_, &other->_impl_.id_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RadarTarget, _impl_.is_fighter_)
      + sizeof(RadarTarget::_impl_.is_fighter_)
      - PROTOBUF_FIELD_OFFSET(RadarTarget, _impl_.lat_)>(
          reinterpret_cast<char*>(&_impl_.lat_),
          reinterpret_cast<char*>(&other->_impl_.lat_));
}

::google::protobuf::Metadata RadarTarget::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace radar
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::std::false_type
    _static_init2_ [[maybe_unused]] =
        (::_pbi::AddDescriptors(&descriptor_table_radar_2eproto),
         ::std::false_type{});
#include "google/protobuf/port_undef.inc"
