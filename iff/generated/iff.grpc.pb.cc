// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: iff.proto

#include "iff.pb.h"
#include "iff.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
#include <grpcpp/ports_def.inc>
namespace iff {

static const char* IFFService_method_names[] = {
  "/iff.IFFService/StreamIFFData",
};

std::unique_ptr< IFFService::Stub> IFFService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< IFFService::Stub> stub(new IFFService::Stub(channel, options));
  return stub;
}

IFFService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_StreamIFFData_(IFFService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  {}

::grpc::ClientReader< ::iff::IFFStreamResponse>* IFFService::Stub::StreamIFFDataRaw(::grpc::ClientContext* context, const ::iff::IFFRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::iff::IFFStreamResponse>::Create(channel_.get(), rpcmethod_StreamIFFData_, context, request);
}

void IFFService::Stub::async::StreamIFFData(::grpc::ClientContext* context, const ::iff::IFFRequest* request, ::grpc::ClientReadReactor< ::iff::IFFStreamResponse>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::iff::IFFStreamResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_StreamIFFData_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::iff::IFFStreamResponse>* IFFService::Stub::AsyncStreamIFFDataRaw(::grpc::ClientContext* context, const ::iff::IFFRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::iff::IFFStreamResponse>::Create(channel_.get(), cq, rpcmethod_StreamIFFData_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::iff::IFFStreamResponse>* IFFService::Stub::PrepareAsyncStreamIFFDataRaw(::grpc::ClientContext* context, const ::iff::IFFRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::iff::IFFStreamResponse>::Create(channel_.get(), cq, rpcmethod_StreamIFFData_, context, request, false, nullptr);
}

IFFService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      IFFService_method_names[0],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< IFFService::Service, ::iff::IFFRequest, ::iff::IFFStreamResponse>(
          [](IFFService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::iff::IFFRequest* req,
             ::grpc::ServerWriter<::iff::IFFStreamResponse>* writer) {
               return service->StreamIFFData(ctx, req, writer);
             }, this)));
}

IFFService::Service::~Service() {
}

::grpc::Status IFFService::Service::StreamIFFData(::grpc::ServerContext* context, const ::iff::IFFRequest* request, ::grpc::ServerWriter< ::iff::IFFStreamResponse>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace iff
#include <grpcpp/ports_undef.inc>

